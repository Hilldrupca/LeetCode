/// LeetCode Monthly Challenge problem for March 8th, 2021.
pub struct Solution {}

impl Solution {
    
    /// Returns the number of steps to reduce a string containing only two
    /// characters to an empty string. At each step one palindromic subsequence
    /// may be removed.
    ///
    /// A subsequence can be generated by deleteing some characters from the 
    /// given string without changing its order.
    ///
    /// # Arguments
    /// * s - A string consisting of up to two characters.
    ///
    /// # Examples
    /// ```
    /// # use crate::remove_palindromic_subsequences::Solution;
    /// let ex_one = Solution::remove_palindrome_sub(String::from("ababa"));
    /// let ex_two = Solution::remove_palindrome_sub(String::from("abb"));
    /// let ex_three = Solution::remove_palindrome_sub(String::from("baabb"));
    /// let ex_four = Solution::remove_palindrome_sub(String::new());
    ///
    /// assert_eq!(ex_one, 1);
    /// assert_eq!(ex_two, 2);
    /// assert_eq!(ex_three, 2);
    /// assert_eq!(ex_four, 0);
    /// ```
    ///
    /// # Constraints
    /// * 0 <= s.len() <= 1000
    /// * s only consists of up to two characters
    ///
    pub fn remove_palindrome_sub(s: String) -> i32 {
        if s.len() == 0 { return 0 as i32; }
        
        let ch: Vec<char> = s.chars().collect();
        
        let mut i = 0;
        let mut j = ch.len() - 1;
        
        while i < j {
            if ch[i] == ch[j] {
                i += 1;
                j -= 1;
            } else {
                break;
            }
        }
        
        if i >= j {
            1 as i32
        } else {
            2 as i32
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn palindromic_string() {
        assert_eq!(
            Solution::remove_palindrome_sub(String::from("ababa")),
            1,
        );
    }
    
    #[test]
    fn non_palindromic_string() {
        assert_eq!(
            Solution::remove_palindrome_sub(String::from("abb")),
            2,
        );
        
        assert_eq!(
            Solution::remove_palindrome_sub(String::from("baabb")),
            2,
        );
    }
    
    #[test]
    fn empty_string() {
        assert_eq!(
            Solution::remove_palindrome_sub(String::new()),
            0,
        );
    }
}
